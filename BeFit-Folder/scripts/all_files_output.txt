=== Combined File Output ===

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\chat.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

//debug
error_log("Session data: " . print_r($_SESSION, true));

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}
// Initialize chat history if it doesn't exist
if (!isset($_SESSION['chat_history'])) {
    $_SESSION['chat_history'] = [
        [
            'role' => 'system',
            'content' => 'You are a professional fitness trainer helping with workout plans.'
        ],
        [
            'role' => 'ai',
            'content' => "Hello! I'm your AI fitness trainer. Ask me anything about your workout plan."
        ]
    ];
}

// Ensure workout data exists
// Ensure workout data exists
if (!isset($_SESSION['workout_plan'])) {
    $userData = getUserWorkoutData($pdo, $_SESSION['user_id']);
    if (!empty($userData['workout_plan'])) {
        $_SESSION['workout_plan'] = json_decode($userData['workout_plan'], true);
    } else {
        $_SESSION['error'] = 'Please generate a workout plan first';
        header("Location: form.php");
        exit;
    }
}

$userData = getUserWorkoutData($pdo, $_SESSION['user_id']);
$workoutPlan = !empty($userData['workout_plan']) ? json_decode($userData['workout_plan'], true) : [];

if (empty($workoutPlan)) {
    header("Location: form.php");
    exit;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BeFit - AI Workout Chat</title>
    <link rel="stylesheet" href="/BeFit-Folder/public/css/styles1.css">
    <link rel="stylesheet" href="/BeFit-Folder/workout_builder/assets/css/workout_builder.css">
</head>
<body>
    <?php include __DIR__ . '/../includes/header.php'; ?>
    
    <main class="chat-container">
        <div class="chat-header">
            <h1>AI Workout Trainer</h1>
            <p>Ask questions about your workout plan, get modifications, or advice</p>
            
            <div class="chat-actions">
                <a href="view_workout.php" class="secondary-button">View My Plan</a>
                <a href="form.php" class="secondary-button">Update My Plan</a>
            </div>
        </div>
        
        <div class="chat-box" id="chatBox">
            <div class="chat-message ai-message">
                <div class="message-content">
                    <strong>AI Trainer:</strong> Hello! I'm your AI fitness trainer. You can ask me anything about your workout plan. 
                    Would you like modifications, explanations of exercises, or advice on nutrition?
                </div>
            </div>
            
            <!-- Chat messages will be added here dynamically -->
        </div>
        
        <div class="chat-input">
            <form id="chatForm">
                <input type="text" id="userMessage" placeholder="Type your message here..." required>
                <button type="submit" class="cta-button">Send</button>
            </form>
            
            <div class="suggested-questions">
                <p>Try asking:</p>
                <button class="suggestion-btn">How can I make this workout harder?</button>
                <button class="suggestion-btn">Explain the proper form for squats</button>
                <button class="suggestion-btn">Suggest a modification for back pain</button>
            </div>
        </div>
    </main>
    
    <?php include __DIR__ . '/../includes/footer.php'; ?>
    
    <script src="/BeFit-Folder/workout_builder/assets/js/workout_builder.js"></script>
    <script>
        const chatForm = document.getElementById('chatForm');
        const chatBox = document.getElementById('chatBox');
        const userMessage = document.getElementById('userMessage');
        
        // Load conversation history from session if available
        let conversationHistory = <?= json_encode($_SESSION['workout_chat_history'] ?? [
            ['role' => 'system', 'content' => 'You are a professional fitness trainer helping a user with their workout plan.'],
            ['role' => 'ai', 'content' => 'Hello! I\'m your AI fitness trainer. You can ask me anything about your workout plan.']
        ]) ?>;
        
        // Display initial messages
        conversationHistory.forEach(msg => {
            if (msg.role === 'ai') {
                addAiMessage(msg.content);
            } else if (msg.role === 'user') {
                addUserMessage(msg.content);
            }
        });
        
        // Handle form submission
        chatForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const message = userMessage.value.trim();
            if (!message) return;
            
            // Add user message to chat
            addUserMessage(message);
            userMessage.value = '';
            
            // Add to conversation history
            conversationHistory.push({role: 'user', content: message});
            
            // Show loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'chat-message ai-message loading';
            loadingDiv.innerHTML = '<div class="message-content"><strong>AI Trainer:</strong> Thinking...</div>';
            chatBox.appendChild(loadingDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
            
            try {
                // Send to server for processing
                const response = await fetch('process_chat.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        history: conversationHistory,
                        workoutPlan: <?= json_encode($workoutPlan) ?>,
                        userData: <?= json_encode($userData) ?>
                    })
                });
                
                const data = await response.json();
                
                // Remove loading indicator
                chatBox.removeChild(loadingDiv);
                
                if (data.error) {
                    addAiMessage("Sorry, I encountered an error: " + data.error);
                } else {
                    addAiMessage(data.response);
                    conversationHistory.push({role: 'ai', content: data.response});
                    
                    // Update session history (simplified for example)
                    fetch('update_chat_history.php', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({history: conversationHistory})
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                chatBox.removeChild(loadingDiv);
                addAiMessage("Sorry, I'm having trouble responding right now. Please try again later.");
            }
        });
        
        // Handle suggestion buttons
        document.querySelectorAll('.suggestion-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                userMessage.value = this.textContent;
                userMessage.focus();
            });
        });
        
        function addUserMessage(content) {
            const div = document.createElement('div');
            div.className = 'chat-message user-message';
            div.innerHTML = `<div class="message-content"><strong>You:</strong> ${content}</div>`;
            chatBox.appendChild(div);
            chatBox.scrollTop = chatBox.scrollHeight;
        }
        
        function addAiMessage(content) {
            const div = document.createElement('div');
            div.className = 'chat-message ai-message';
            div.innerHTML = `<div class="message-content"><strong>AI Trainer:</strong> ${content}</div>`;
            chatBox.appendChild(div);
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    </script>
</body>
</html>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\form.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}

$userData = getUserWorkoutData($pdo, $_SESSION['user_id']);
$hasExistingPlan = !empty($userData);

// Set default values for the form
$defaultData = [
    'weight' => $userData['weight'] ?? '',
    'height' => $userData['height'] ?? '',
    'age' => $userData['age'] ?? '',
    'gender' => $userData['gender'] ?? 'male',
    'fitness_level' => $userData['fitness_level'] ?? 'beginner',
    'goal' => $userData['goal'] ?? 'build_muscle',
    'training_days' => $userData['training_days'] ?? 3,
    'equipment' => $userData['equipment'] ?? 'dumbbells,resistance_bands',
    'medical_conditions' => $userData['medical_conditions'] ?? '',
    'preferences' => $userData['preferences'] ?? ''
];
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BeFit - Workout Builder</title>
    <link rel="stylesheet" href="/BeFit-Folder/public/css/styles1.css">
    <link rel="stylesheet" href="/BeFit-Folder/workout_builder/assets/css/workout_builder.css">
</head>
<body>
    <?php include __DIR__ . '/../includes/header.php'; ?>
    
    <main class="workout-builder-container">
        <div class="workout-header">
            <h1>AI-Powered Workout Builder</h1>
            <p>Get a personalized workout plan tailored to your goals and equipment</p>
        </div>
        
        <?php if ($hasExistingPlan): ?>
        <div class="existing-plan-notice">
            <p>You already have a workout plan. You can update it below or <a href="chat.php">chat with your AI trainer</a>.</p>
        </div>
        <?php endif; ?>
        
        <form id="workoutForm" action="process_form.php" method="post" class="workout-form">
            <div class="form-section">
                <h2>Basic Information</h2>
                
                <div class="form-group">
                    <label for="weight">Weight (kg)</label>
                    <input type="number" id="weight" name="weight" value="<?= htmlspecialchars($defaultData['weight']) ?>" required min="30" max="200">
                </div>
                
                <div class="form-group">
                    <label for="height">Height (cm)</label>
                    <input type="number" id="height" name="height" value="<?= htmlspecialchars($defaultData['height']) ?>" required min="100" max="250">
                </div>
                
                <div class="form-group">
                    <label for="age">Age</label>
                    <input type="number" id="age" name="age" value="<?= htmlspecialchars($defaultData['age']) ?>" required min="12" max="100">
                </div>
                
                <div class="form-group">
                    <label for="gender">Gender</label>
                    <select id="gender" name="gender" required>
                        <option value="male" <?= $defaultData['gender'] === 'male' ? 'selected' : '' ?>>Male</option>
                        <option value="female" <?= $defaultData['gender'] === 'female' ? 'selected' : '' ?>>Female</option>
                        <option value="other" <?= $defaultData['gender'] === 'other' ? 'selected' : '' ?>>Other</option>
                    </select>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Fitness Details</h2>
                
                <div class="form-group">
                    <label for="fitness_level">Current Fitness Level</label>
                    <select id="fitness_level" name="fitness_level" required>
                        <option value="beginner" <?= $defaultData['fitness_level'] === 'beginner' ? 'selected' : '' ?>>Beginner</option>
                        <option value="intermediate" <?= $defaultData['fitness_level'] === 'intermediate' ? 'selected' : '' ?>>Intermediate</option>
                        <option value="advanced" <?= $defaultData['fitness_level'] === 'advanced' ? 'selected' : '' ?>>Advanced</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="goal">Primary Goal</label>
                    <select id="goal" name="goal" required>
                        <option value="build_muscle" <?= $defaultData['goal'] === 'build_muscle' ? 'selected' : '' ?>>Build Muscle</option>
                        <option value="lose_weight" <?= $defaultData['goal'] === 'lose_weight' ? 'selected' : '' ?>>Lose Weight</option>
                        <option value="strength" <?= $defaultData['goal'] === 'strength' ? 'selected' : '' ?>>Increase Strength</option>
                        <option value="endurance" <?= $defaultData['goal'] === 'endurance' ? 'selected' : '' ?>>Improve Endurance</option>
                        <option value="tone" <?= $defaultData['goal'] === 'tone' ? 'selected' : '' ?>>Tone Body</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="training_days">Days per Week You Can Train</label>
                    <select id="training_days" name="training_days" required>
                        <?php for ($i = 2; $i <= 6; $i++): ?>
                        <option value="<?= $i ?>" <?= $defaultData['training_days'] == $i ? 'selected' : '' ?>><?= $i ?> days</option>
                        <?php endfor; ?>
                    </select>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Equipment & Preferences</h2>
                
                <div class="form-group">
                    <label>Available Equipment</label>
                    <div class="checkbox-group">
                        <label><input type="checkbox" name="equipment[]" value="dumbbells" <?= strpos($defaultData['equipment'], 'dumbbells') !== false ? 'checked' : '' ?>> Dumbbells</label>
                        <label><input type="checkbox" name="equipment[]" value="resistance_bands" <?= strpos($defaultData['equipment'], 'resistance_bands') !== false ? 'checked' : '' ?>> Resistance Bands</label>
                        <label><input type="checkbox" name="equipment[]" value="pullup_bar" <?= strpos($defaultData['equipment'], 'pullup_bar') !== false ? 'checked' : '' ?>> Pull-up Bar</label>
                        <label><input type="checkbox" name="equipment[]" value="weight_bench" <?= strpos($defaultData['equipment'], 'weight_bench') !== false ? 'checked' : '' ?>> Weight Bench</label>
                        <label><input type="checkbox" name="equipment[]" value="none" <?= strpos($defaultData['equipment'], 'none') !== false ? 'checked' : '' ?>> No Equipment</label>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="medical_conditions">Medical Conditions (if any)</label>
                    <textarea id="medical_conditions" name="medical_conditions"><?= htmlspecialchars($defaultData['medical_conditions']) ?></textarea>
                </div>
                
                <div class="form-group">
                    <label for="preferences">Workout Preferences (e.g., avoid squats, prefer morning workouts)</label>
                    <textarea id="preferences" name="preferences"><?= htmlspecialchars($defaultData['preferences']) ?></textarea>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="cta-button">Generate My Workout Plan</button>
                <?php if ($hasExistingPlan): ?>
                <a href="history.php" class="secondary-button">View Workout History</a>
                <?php endif; ?>
            </div>
        </form>
    </main>
    
    <?php include __DIR__ . '/../includes/footer.php'; ?>
    
    <script src="/BeFit-Folder/workout_builder/assets/js/workout_builder.js"></script>
</body>
</html>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\history.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}

$workoutHistory = getWorkoutHistory($pdo, $_SESSION['user_id']);
$currentPlan = getUserWorkoutData($pdo, $_SESSION['user_id']);
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BeFit - Workout History</title>
    <link rel="stylesheet" href="/BeFit-Folder/public/css/styles1.css">
    <link rel="stylesheet" href="/BeFit-Folder/workout_builder/assets/css/workout_builder.css">
    <style>
        .history-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 2rem;
        }
        .history-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        .history-grid {
            display: grid;
            gap: 1.5rem;
        }
        .history-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .history-date {
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }
        .history-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        .no-history {
            text-align: center;
            padding: 2rem;
            background: white;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <?php include __DIR__ . '/../includes/header.php'; ?>
    
    <div class="history-container">
        <div class="history-header">
            <h1>Your Workout History</h1>
            <p>Track your progress and revisit past workouts</p>
            
            <div class="header-actions">
                <?php if (!empty($currentPlan['workout_plan'])): ?>
                    <a href="view_workout.php" class="cta-button">
                        <i class="fas fa-dumbbell"></i> View Current Plan
                    </a>
                <?php endif; ?>
                <a href="form.php" class="secondary-button">
                    <i class="fas fa-plus"></i> Create New Plan
                </a>
            </div>
        </div>
        
        <div class="history-grid">
            <?php if (!empty($workoutHistory)): ?>
                <?php foreach ($workoutHistory as $workout): 
                    $workoutData = json_decode($workout['workout_data'], true);
                    $workoutDate = date('F j, Y', strtotime($workout['workout_date']));
                ?>
                    <div class="history-card">
                        <div class="history-date">
                            <?= htmlspecialchars($workoutDate) ?>
                            <?php if ($workout['completed']): ?>
                                <span class="completed-badge">✓ Completed</span>
                            <?php else: ?>
                                <span class="incomplete-badge">⏱ In Progress</span>
                            <?php endif; ?>
                        </div>
                        
                        <?php if (!empty($workoutData['notes'])): ?>
                            <div class="history-notes">
                                <p><?= nl2br(htmlspecialchars($workoutData['notes'])) ?></p>
                            </div>
                        <?php endif; ?>
                        
                        <div class="history-actions">
                            <a href="view_workout.php?history_id=<?= $workout['id'] ?>" class="secondary-button">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <?php if (!$workout['completed']): ?>
                                <form action="log_completion.php" method="post" style="display: inline;">
                                    <input type="hidden" name="workout_id" value="<?= $workout['id'] ?>">
                                    <button type="submit" class="cta-button small">
                                        <i class="fas fa-check"></i> Mark Complete
                                    </button>
                                </form>
                            <?php endif; ?>
                        </div>
                    </div>
                <?php endforeach; ?>
            <?php else: ?>
                <div class="no-history">
                    <h3>No Workout History Yet</h3>
                    <p>Your completed workouts will appear here.</p>
                    <a href="form.php" class="cta-button">Create Your First Workout</a>
                </div>
            <?php endif; ?>
        </div>
    </div>
    
    <?php include __DIR__ . '/../includes/footer.php'; ?>
</body>
</html>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\index.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}

$userData = getUserWorkoutData($pdo, $_SESSION['user_id']);

if (empty($userData) || empty($userData['workout_plan'])) {
    header("Location: form.php");
} else {
    // Store plan in session and redirect properly
    $_SESSION['workout_plan'] = json_decode($userData['workout_plan'], true);
    $_SESSION['workout_data'] = $userData; // Store all user data
    header("Location: view_workout.php");
}
exit;
?>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\log_completion.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !isset($_SESSION['user_id']) || !isset($_POST['workout_id'])) {
    $_SESSION['error'] = "Invalid request";
    header("Location: history.php");
    exit;
}

$workoutId = (int)$_POST['workout_id'];
$userId = (int)$_SESSION['user_id'];

if (logWorkoutCompletion($pdo, $workoutId, $userId)) {
    $_SESSION['success'] = "Workout marked as completed!";
} else {
    $_SESSION['error'] = "Failed to update workout";
}

header("Location: history.php");
exit;
?>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\process_chat.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/gemini_client.php';

header('Content-Type: application/json');

if (!isset($_SESSION['user_id'])) {
    echo json_encode(['error' => 'Not authenticated']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);

if (empty($input['message'])) {
    echo json_encode(['error' => 'No message provided']);
    exit;
}

// Add user message to history
$_SESSION['chat_history'][] = [
    'role' => 'user',
    'content' => $input['message']
];

try {
    $gemini = new GeminiWorkoutClient();
    
    // Include workout plan in context
    $workoutContext = "Current workout plan:\n" . 
        json_encode($_SESSION['workout_plan']) . "\n\n" .
        "Conversation history:\n";
    
    foreach ($_SESSION['chat_history'] as $message) {
        $workoutContext .= "{$message['role']}: {$message['content']}\n";
    }
    
    $response = $gemini->chatAboutWorkout($_SESSION['chat_history'], $workoutContext);
    
    if (isset($response['error'])) {
        throw new Exception($response['error']);
    }
    
} catch (Exception $e) {
    error_log("Chat error: " . $e->getMessage());
    echo json_encode([
        'error' => 'Failed to process your message: ' . $e->getMessage()
    ]);
    exit;
}

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\process_form.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/gemini_client.php';
require_once __DIR__ . '/includes/workout_functions.php';

// Debug: Check if form is submitting
error_log("Form submitted: " . print_r($_POST, true));
error_reporting(E_ALL);
ini_set('display_errors', 1);

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}


if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header("Location: form.php");
    exit;
}

if (!isset($workoutPlan['weekly_plan']) || empty($workoutPlan['weekly_plan'])) {
    $_SESSION['error'] = 'Invalid workout plan structure received';
    header("Location: form.php");
    exit;
}

// Validate and sanitize input
$weight = filter_input(INPUT_POST, 'weight', FILTER_VALIDATE_FLOAT);
$height = filter_input(INPUT_POST, 'height', FILTER_VALIDATE_INT);
$age = filter_input(INPUT_POST, 'age', FILTER_VALIDATE_INT);
$gender = filter_input(INPUT_POST, 'gender', FILTER_SANITIZE_STRING);
$fitness_level = filter_input(INPUT_POST, 'fitness_level', FILTER_SANITIZE_STRING);
$goal = filter_input(INPUT_POST, 'goal', FILTER_SANITIZE_STRING);
$training_days = filter_input(INPUT_POST, 'training_days', FILTER_VALIDATE_INT);
$equipment = isset($_POST['equipment']) ? implode(',', $_POST['equipment']) : 'none';
$medical_conditions = filter_input(INPUT_POST, 'medical_conditions', FILTER_SANITIZE_STRING);
$preferences = filter_input(INPUT_POST, 'preferences', FILTER_SANITIZE_STRING);

// Basic validation
if (!$weight || !$height || !$age || !$gender || !$fitness_level || !$goal || !$training_days) {
    $_SESSION['error'] = 'Please fill in all required fields.';
    header("Location: form.php");
    exit;
}

// Prepare data for Gemini API
$userData = [
    'weight' => $weight,
    'height' => $height,
    'age' => $age,
    'gender' => $gender,
    'fitness_level' => $fitness_level,
    'goal' => $goal,
    'training_days' => $training_days,
    'equipment' => $equipment,
    'medical_conditions' => $medical_conditions,
    'preferences' => $preferences
];

// Save user data to database first
saveUserWorkoutData($pdo, $_SESSION['user_id'], $userData);

// Generate workout plan with Gemini
$gemini = new GeminiWorkoutClient();
$workoutPlan = $gemini->generateWorkoutPlan($userData);

if (isset($workoutPlan['error'])) {
    $_SESSION['error'] = $workoutPlan['error'];
    header("Location: form.php");
    exit;
}

// Save the generated workout plan
saveWorkoutPlan($pdo, $_SESSION['user_id'], $workoutPlan);

// Store supplement recommendations
if (isset($workoutPlan['supplement_recommendations'])) {
    saveSupplementRecommendations($pdo, $_SESSION['user_id'], $workoutPlan['supplement_recommendations']);
}

// Redirect to view the workout plan
$_SESSION['workout_plan'] = $workoutPlan;
$_SESSION['workout_data'] = $userData; // Store all user data
error_log("Workout plan generated: " . print_r($workoutPlan, true));
header("Location: view_workout.php");
exit;
?>

===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\save_workout.php
===============================


===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\view_workout.php
===============================
<?php
require_once __DIR__ . '/../auth/config.php';
require_once __DIR__ . '/includes/workout_functions.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: /BeFit-Folder/auth/signin.php");
    exit;
}
$isHistoricalView = isset($_GET['history_id']);
$workoutData = [];

if ($isHistoricalView) {
    // Load historical workout
    $historyId = (int)$_GET['history_id'];
    $stmt = $pdo->prepare("SELECT * FROM user_workout_history 
                          WHERE id = ? AND user_id = ?");
    $stmt->execute([$historyId, $_SESSION['user_id']]);
    $workoutData = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$workoutData) {
        $_SESSION['error'] = "Workout not found";
        header("Location: history.php");
        exit;
    }
    
    $workoutPlan = json_decode($workoutData['workout_data'], true);
    $userData = json_decode($workoutPlan['user_data'] ?? '{}', true);
} else {
    // Existing logic for current workout
    $workoutPlan = $_SESSION['workout_plan'] ?? [];
    
    if (empty($workoutPlan)) {
        $userData = getUserWorkoutData($pdo, $_SESSION['user_id']);
        if (!empty($userData['workout_plan'])) {
            $workoutPlan = json_decode($userData['workout_plan'], true);
        }
    }
    
    if (empty($workoutPlan)) {
        header("Location: form.php");
        exit;
    }
}
$workoutPlan = $_SESSION['workout_plan'] ?? [];
$userData = getUserWorkoutData($pdo, $_SESSION['user_id']);

if (empty($workoutPlan) && !empty($userData['workout_plan'])) {
    $workoutPlan = json_decode($userData['workout_plan'], true);
}

if (empty($workoutPlan)) {
    header("Location: form.php");
    exit;
}

$recommendedSupplements = [];
$stmt = $pdo->prepare("SELECT rs.*, p.name, p.price, p.image_url 
    FROM recommended_supplements rs
    JOIN products p ON rs.product_id = p.id
    WHERE rs.user_id = ? AND rs.purchased = 0");
$stmt->execute([$_SESSION['user_id']]);
$recommendedSupplements = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BeFit - Your Workout Plan</title>
    <link rel="stylesheet" href="/BeFit-Folder/public/css/styles1.css">
    <link rel="stylesheet" href="/BeFit-Folder/workout_builder/assets/css/workout_builder.css">
</head>
<body>
    <?php include __DIR__ . '/../includes/header.php'; ?>
    
    <main class="workout-plan-container">
    <div class="workout-header">
        <h1>
            <?= $isHistoricalView ? 
                'Workout from '.htmlspecialchars(date('F j, Y', strtotime($workoutData['workout_date']))) : 
                'Your Personalized Workout Plan' ?>
        </h1>
        
        <p>
            <?= $isHistoricalView ? 
                'Your past workout session' : 
                'Generated specifically for your goals and fitness level' ?>
        </p>
        
        <div class="plan-actions">
            <?php if (!$isHistoricalView): ?>
                <a href="chat.php" class="cta-button" id="chatButton">
                    <i class="fas fa-comment-dots"></i> Chat with AI Trainer
                </a>
            <?php endif; ?>
            <a href="history.php" class="secondary-button">
                <i class="fas fa-history"></i> <?= $isHistoricalView ? 'Back to History' : 'View History' ?>
            </a>
        </div>
        
        <?php if ($isHistoricalView && isset($workoutData['notes'])): ?>
            <div class="workout-notes">
                <h3>Your Notes:</h3>
                <p><?= nl2br(htmlspecialchars($workoutData['notes'])) ?></p>
            </div>
        <?php endif; ?>
    </div>
        
        <div class="plan-details">
            <div class="user-stats">
                <h2>Your Stats</h2>
                <ul>
                    <li><strong>Age:</strong> <?= htmlspecialchars($userData['age']) ?></li>
                    <li><strong>Height:</strong> <?= htmlspecialchars($userData['height']) ?> cm</li>
                    <li><strong>Weight:</strong> <?= htmlspecialchars($userData['weight']) ?> kg</li>
                    <li><strong>Fitness Level:</strong> <?= ucfirst(htmlspecialchars($userData['fitness_level'])) ?></li>
                    <li><strong>Goal:</strong> <?= formatGoal(htmlspecialchars($userData['goal'])) ?></li>
                    <li><strong>Training Days:</strong> <?= htmlspecialchars($userData['training_days']) ?> per week</li>
                </ul>
            </div>
            
            <div class="general-advice">
                <h2>General Advice</h2>
                <p><?= nl2br(htmlspecialchars($workoutPlan['general_advice'] ?? 'No general advice provided.')) ?></p>
            </div>
        </div>
        
        <div class="weekly-plan">
            <h2>Weekly Workout Schedule</h2>
            
            <?php foreach ($workoutPlan['weekly_plan'] as $day => $workout): ?>
            <div class="workout-day">
                <h3><?= htmlspecialchars(ucfirst($day)) ?></h3>
                
                <?php if (empty($workout['exercises'])): ?>
                    <p>Rest day or no exercises specified.</p>
                <?php else: ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Exercise</th>
                                <th>Sets</th>
                                <th>Reps</th>
                                <th>Rest</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($workout['exercises'] as $exercise): ?>
                            <tr>
                                <td><?= htmlspecialchars($exercise['name']) ?></td>
                                <td><?= htmlspecialchars($exercise['sets'] ?? '-') ?></td>
                                <td><?= htmlspecialchars($exercise['reps'] ?? '-') ?></td>
                                <td><?= htmlspecialchars($exercise['rest'] ?? '-') ?></td>
                                <td><?= htmlspecialchars($exercise['notes'] ?? '-') ?></td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
            </div>
            <?php endforeach; ?>
        </div>
        
        <?php if (!empty($recommendedSupplements)): ?>
        <div class="supplement-recommendations">
            <h2>Recommended Supplements</h2>
            <p>Based on your goals, these supplements may help you achieve better results:</p>
            
            <div class="supplement-grid">
                <?php foreach ($recommendedSupplements as $supplement): ?>
                <div class="supplement-card">
                    <img src="/BeFit-Folder/public/<?= htmlspecialchars($supplement['image_url']) ?>" alt="<?= htmlspecialchars($supplement['name']) ?>">
                    <h3><?= htmlspecialchars($supplement['name']) ?></h3>
                    <p class="price">$<?= number_format($supplement['price'], 2) ?></p>
                    <p class="reason"><?= htmlspecialchars($supplement['reason']) ?></p>
                    <a href="/BeFit-Folder/ecommerce/shop.php?add_to_cart=<?= $supplement['product_id'] ?>" class="buy-button">Add to Cart</a>
                </div>
                <?php endforeach; ?>
            </div>
        </div>
        <?php endif; ?>
        
        <div class="plan-actions-bottom">
            <a href="form.php" class="secondary-button">Update My Plan</a>
            <button id="printPlan" class="secondary-button">Print This Plan</button>
        </div>
    </main>
    
    <?php include __DIR__ . '/../includes/footer.php'; ?>
    
    <script src="/BeFit-Folder/workout_builder/assets/js/workout_builder.js"></script>
    <script>
        document.getElementById('printPlan').addEventListener('click', function() {
            window.print();
        });
    </script>
    <script>
        document.getElementById('chatButton').addEventListener('click', function(e) {
            // Check if workout data exists
            if (!<?= isset($_SESSION['workout_plan']) ? 'true' : 'false' ?>) {
                e.preventDefault();
                alert('Please generate a workout plan first');
                window.location.href = 'form.php';
            }
            // Otherwise proceed normally
        });
    </script>
</body>
</html>

<?php
function formatGoal(string $goal): string {
    $goals = [
        'build_muscle' => 'Build Muscle',
        'lose_weight' => 'Lose Weight',
        'strength' => 'Increase Strength',
        'endurance' => 'Improve Endurance',
        'tone' => 'Tone Body'
    ];
    
    return $goals[$goal] ?? ucfirst(str_replace('_', ' ', $goal));
}
?>
.
===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\assets\css\workout_builder.css
===============================
/* Workout Builder Styles */
.workout-builder-container, .workout-plan-container, .chat-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
}

.workout-header, .chat-header {
    text-align: center;
    margin-bottom: 3rem;
}

.workout-header h1, .chat-header h1 {
    color: var(--primary);
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
}

.workout-header p, .chat-header p {
    color: var(--gray);
    font-size: 1.2rem;
}

.workout-form {
    background: white;
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
}

.form-section {
    margin-bottom: 2.5rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
}

.form-section:last-child {
    border-bottom: none;
}

.form-section h2 {
    color: var(--primary-dark);
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--dark);
}

.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

.form-group textarea {
    min-height: 100px;
    resize: vertical;
}

.checkbox-group {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

.checkbox-group label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: normal;
    cursor: pointer;
}

.checkbox-group input[type="checkbox"] {
    margin: 0;
}

.form-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
}

.secondary-button {
    display: inline-block;
    padding: 0.8rem 1.5rem;
    background: white;
    color: var(--primary);
    border: 2px solid var(--primary);
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s ease;
}

.secondary-button:hover {
    background: var(--primary-light);
}

/* Workout Plan Styles */
.plan-details {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
    margin-bottom: 3rem;
}

.user-stats ul {
    list-style: none;
    padding: 0;
}

.user-stats li {
    margin-bottom: 0.8rem;
    padding-bottom: 0.8rem;
    border-bottom: 1px solid #eee;
}

.weekly-plan {
    margin-bottom: 3rem;
}

.workout-day {
    background: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    margin-bottom: 1.5rem;
}

.workout-day h3 {
    color: var(--primary);
    margin-top: 0;
    margin-bottom: 1rem;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
}

th, td {
    padding: 0.8rem;
    text-align: left;
    border-bottom: 1px solid #eee;
}

th {
    background: var(--primary-light);
    color: var(--primary-dark);
}

.supplement-recommendations {
    margin-bottom: 3rem;
}

.supplement-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
}

.supplement-card {
    background: white;
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: transform 0.2s ease;
}

.supplement-card:hover {
    transform: translateY(-5px);
}

.supplement-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.supplement-card h3 {
    margin: 1rem;
    font-size: 1.2rem;
    color: var(--dark);
}

.supplement-card .price {
    margin: 0 1rem 0.5rem;
    font-weight: bold;
    color: var(--primary);
}

.supplement-card .reason {
    margin: 0 1rem 1rem;
    color: var(--gray);
    font-size: 0.9rem;
}

.supplement-card .buy-button {
    display: block;
    margin: 1rem;
    padding: 0.5rem;
    background: var(--primary);
    color: white;
    text-align: center;
    text-decoration: none;
    border-radius: 4px;
    transition: background 0.2s ease;
}

.supplement-card .buy-button:hover {
    background: var(--primary-dark);
}

.plan-actions, .plan-actions-bottom, .chat-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 2rem 0;
}

.plan-actions-bottom {
    margin-top: 3rem;
}

/* Chat Styles */
.chat-box {
    height: 500px;
    overflow-y: auto;
    background: white;
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.chat-message {
    margin-bottom: 1.5rem;
}

.chat-message.user-message {
    text-align: right;
}

.chat-message.ai-message {
    text-align: left;
}

.message-content {
    display: inline-block;
    max-width: 80%;
    padding: 1rem;
    border-radius: 1rem;
    background: #f0f4f8;
}

.user-message .message-content {
    background: var(--primary);
    color: white;
}

.chat-message.loading .message-content {
    color: var(--gray);
    font-style: italic;
}

.chat-input {
    background: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.chat-input form {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.chat-input input[type="text"] {
    flex: 1;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

.suggested-questions {
    margin-top: 1rem;
}

.suggested-questions p {
    margin-bottom: 0.5rem;
    color: var(--gray);
    font-size: 0.9rem;
}

.suggestion-btn {
    background: none;
    border: none;
    color: var(--primary);
    text-decoration: underline;
    cursor: pointer;
    margin-right: 1rem;
    font-size: 0.9rem;
    padding: 0;
}

.suggestion-btn:hover {
    color: var(--primary-dark);
}

@media (max-width: 768px) {
    .plan-details {
        grid-template-columns: 1fr;
    }
    
    .form-actions, .plan-actions, .plan-actions-bottom, .chat-actions {
        flex-direction: column;
    }
    
    .secondary-button, .cta-button {
        width: 100%;
        text-align: center;
    }
}

/* Historical workout styling */
.workout-notes {
    background: rgba(255,255,255,0.1);
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
}

.history-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    margin-left: 1rem;
}

.history-badge.completed {
    background: #4CAF50;
    color: white;
}

.history-badge.incomplete {
    background: #FFC107;
    color: #333;
}.
.
===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\assets\js\workout_builder.js
===============================
// Form validation and enhancements
document.addEventListener('DOMContentLoaded', function() {
    // Equipment selection logic
    const equipmentCheckboxes = document.querySelectorAll('input[name="equipment[]"]');
    const noneCheckbox = document.querySelector('input[name="equipment[]"][value="none"]');
    
    if (noneCheckbox) {
        noneCheckbox.addEventListener('change', function() {
            if (this.checked) {
                equipmentCheckboxes.forEach(cb => {
                    if (cb !== noneCheckbox) cb.checked = false;
                });
            }
        });
        
        equipmentCheckboxes.forEach(cb => {
            if (cb !== noneCheckbox) {
                cb.addEventListener('change', function() {
                    if (this.checked) {
                        noneCheckbox.checked = false;
                    }
                });
            }
        });
    }
    
    // Form submission enhancements
    const workoutForm = document.getElementById('workoutForm');
    if (workoutForm) {
        workoutForm.addEventListener('submit', function(e) {
            // Additional client-side validation can go here
            const weight = parseFloat(document.getElementById('weight').value);
            const height = parseFloat(document.getElementById('height').value);
            
            if (weight < 30 || weight > 200) {
                alert('Please enter a valid weight between 30kg and 200kg');
                e.preventDefault();
                return;
            }
            
            if (height < 100 || height > 250) {
                alert('Please enter a valid height between 100cm and 250cm');
                e.preventDefault();
                return;
            }
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="loader"></span> Generating Your Plan...';
            }
        });
    }
    
    // Print button functionality
    const printButton = document.getElementById('printPlan');
    if (printButton) {
        printButton.addEventListener('click', function() {
            window.print();
        });
    }
    
    // Error message display
    if (document.querySelector('.error-message')) {
        setTimeout(() => {
            document.querySelector('.error-message').style.display = 'none';
        }, 5000);
    }
});

// Chat functionality is handled inline in chat.php.
.
===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\includes\gemini_client.php
===============================
<?php
require_once __DIR__ . '/../../vendor/autoload.php';
require_once __DIR__ . '/../../auth/config.php';

use GeminiAPI\Resources\Parts\TextPart;
use GeminiAPI\Resources\Content;
use GeminiAPI\Requests\GenerateContentRequest;
use GeminiAPI\Enums\Role;


class GeminiWorkoutClient {
    private $client;
    private $model = 'gemini-pro';

    public function __construct() {
        $this->client = new GeminiAPI\Client(GEMINI_API_KEY);
    }

    public function generateWorkoutPlan(array $userData): array {
        $promptText = $this->buildWorkoutPrompt($userData);

        try {
            $textPart = new TextPart($promptText, 'text/plain');
            $content = new Content([$textPart], Role::User);
            $request = new GenerateContentRequest($this->model, [$content]);
            $response = $this->client->generateContent($request);

            $responseText = '';
            foreach ($response->candidates as $candidate) {
                if (isset($candidate->content->parts[0]->text)) {
                    $responseText .= $candidate->content->parts[0]->text;
                }
            }

            return $this->parseWorkoutResponse($responseText);
        } catch (Exception $e) {
            error_log("Gemini API Error: " . $e->getMessage());
            return ['error' => 'Failed to generate workout plan. Please try again.'];
        }
    }

    public function chatAboutWorkout(array $conversationHistory): array {
        $promptText = "You are a professional fitness trainer. Continue this conversation about workout plans:\n\n";
        foreach ($conversationHistory as $message) {
            $promptText .= "{$message['role']}: {$message['content']}\n";
        }

        try {
            $textPart = new TextPart($promptText, 'text/plain');
            $content = new Content([$textPart], Role::User);
            $request = new GenerateContentRequest($this->model, [$content]);

            $response = $this->client->generateContent($request);

            $responseText = '';
            foreach ($response->candidates as $candidate) {
                if (isset($candidate->content->parts[0]->text)) {
                    $responseText .= $candidate->content->parts[0]->text;
                }
            }

            return ['response' => $responseText];
        } catch (Exception $e) {
            error_log("Gemini Chat Error: " . $e->getMessage());
            return ['error' => 'Failed to process your message. Please try again.'];
        }
    }

    private function buildWorkoutPrompt(array $userData): string {
        $equipmentList = explode(',', $userData['equipment']);
        $equipmentText = implode(', ', $equipmentList);
        
        return sprintf(
            "Create a personalized %s-day workout plan for a %s year old %s, %scm tall, weighing %skg. " .
            "Fitness level: %s. Goal: %s. Available equipment: %s. " .
            "Medical considerations: %s. Preferences: %s. " .
            "Provide a detailed weekly plan with exercises, sets, reps, rest periods, and notes for each day. " .
            "Format the response as valid JSON with these exact keys: " .
            "'weekly_plan' (array of days), 'supplement_recommendations' (array with 'name' and 'reason'), " .
            "and 'general_advice' (string). Ensure the JSON is properly formatted and can be decoded.",
            $userData['training_days'],
            $userData['age'],
            $userData['gender'],
            $userData['height'],
            $userData['weight'],
            $userData['fitness_level'],
            $userData['goal'],
            $equipmentText,
            $userData['medical_conditions'] ?? 'none',
            $userData['preferences'] ?? 'none'
        );
}

    private function parseWorkoutResponse(string $response): array {
        $decoded = json_decode($response, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            preg_match('/\{.*\}/s', $response, $matches);
            if ($matches) {
                $decoded = json_decode($matches[0], true);
            }
        }

        return $decoded ?? ['error' => 'Could not parse the workout plan response.'];
    }
}
.
.
===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\includes\workout_functions.php
===============================
<?php
function getUserWorkoutData(PDO $pdo, int $userId): array {
    $stmt = $pdo->prepare("SELECT * FROM workout_plans WHERE user_id = ? ORDER BY last_updated DESC LIMIT 1");
    $stmt->execute([$userId]);
    return $stmt->fetch(PDO::FETCH_ASSOC) ?: [];
}

function saveUserWorkoutData(PDO $pdo, int $userId, array $data): bool {
    $existing = getUserWorkoutData($pdo, $userId);
    
    if ($existing) {
        // Update existing plan
        $stmt = $pdo->prepare("UPDATE workout_plans SET 
            weight = ?, height = ?, age = ?, gender = ?, fitness_level = ?, 
            goal = ?, training_days = ?, equipment = ?, medical_conditions = ?, 
            preferences = ?, last_updated = NOW() 
            WHERE user_id = ? AND id = ?");
        
        return $stmt->execute([
            $data['weight'], $data['height'], $data['age'], $data['gender'], 
            $data['fitness_level'], $data['goal'], $data['training_days'], 
            $data['equipment'], $data['medical_conditions'], $data['preferences'],
            $userId, $existing['id']
        ]);
    } else {
        // Create new plan
        $stmt = $pdo->prepare("INSERT INTO workout_plans (
            user_id, weight, height, age, gender, fitness_level, goal, 
            training_days, equipment, medical_conditions, preferences
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        
        return $stmt->execute([
            $userId, $data['weight'], $data['height'], $data['age'], $data['gender'], 
            $data['fitness_level'], $data['goal'], $data['training_days'], 
            $data['equipment'], $data['medical_conditions'], $data['preferences']
        ]);
    }
}

function saveWorkoutPlan(PDO $pdo, int $userId, array $plan): bool {
    $jsonPlan = json_encode($plan);
    
    // Save to workout_plans
    $stmt = $pdo->prepare("UPDATE workout_plans SET 
        workout_plan = ?, last_updated = NOW() 
        WHERE user_id = ? ORDER BY last_updated DESC LIMIT 1");
    $success = $stmt->execute([$jsonPlan, $userId]);
    
    // Also log to history
    if ($success) {
        logWorkoutSession($pdo, $userId, [
            'workout_data' => $plan,
            'notes' => 'Workout plan generated'
        ]);
    }
    
    return $success;
}

function saveSupplementRecommendations(PDO $pdo, int $userId, array $recommendations): bool {
    // First clear any existing recommendations
    $pdo->prepare("DELETE FROM recommended_supplements WHERE user_id = ?")->execute([$userId]);
    
    // Map product names to IDs (this should be enhanced with a proper lookup)
    $productMap = [
        'FitRx Smart Adjustable Dumbbells' => 1,
        'Resistance Band Set' => 2,
        'Weightlifting Belt' => 3,
        'Whey Protein' => 5,
        'Creatine Monohydrate' => 6,
        'Preworkout' => 7,
        'Mass Gainer' => 8
    ];
    
    // Save each recommendation
    foreach ($recommendations as $rec) {
        $productId = $productMap[$rec['name']] ?? null;
        if ($productId) {
            $stmt = $pdo->prepare("INSERT INTO recommended_supplements 
                (user_id, product_id, reason) VALUES (?, ?, ?)");
            $stmt->execute([$userId, $productId, $rec['reason']]);
        }
    }
    
    return true;
}

function getWorkoutHistory(PDO $pdo, int $userId): array {
    $stmt = $pdo->prepare("SELECT * FROM user_workout_history 
        WHERE user_id = ? ORDER BY workout_date DESC");
    $stmt->execute([$userId]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function logWorkoutSession(PDO $pdo, int $userId, array $data): bool {
    $stmt = $pdo->prepare("INSERT INTO user_workout_history 
        (user_id, workout_date, workout_data, completed, notes) 
        VALUES (?, ?, ?, ?, ?)");
    
    return $stmt->execute([
        $userId,
        $data['workout_date'] ?? date('Y-m-d'),
        json_encode($data['workout_data'] ?? []),
        $data['completed'] ?? false,
        $data['notes'] ?? ''
    ]);
}

/**
 * Gets a specific historical workout by ID
 */
function getHistoricalWorkout(PDO $pdo, int $workoutId, int $userId): array {
    $stmt = $pdo->prepare("SELECT * FROM user_workout_history 
                          WHERE id = ? AND user_id = ?");
    $stmt->execute([$workoutId, $userId]);
    return $stmt->fetch(PDO::FETCH_ASSOC) ?: [];
}

/**
 * Logs workout completion
 */
function logWorkoutCompletion(PDO $pdo, int $workoutId, int $userId): bool {
    $stmt = $pdo->prepare("UPDATE user_workout_history 
                          SET completed = 1 
                          WHERE id = ? AND user_id = ?");
    return $stmt->execute([$workoutId, $userId]);
}

/**
 * Gets workout statistics
 */
function getWorkoutStats(PDO $pdo, int $userId): array {
    $stats = [];
    
    // Total workouts
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM user_workout_history 
                          WHERE user_id = ?");
    $stmt->execute([$userId]);
    $stats['total_workouts'] = $stmt->fetchColumn();
    
    // Completed workouts
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM user_workout_history 
                          WHERE user_id = ? AND completed = 1");
    $stmt->execute([$userId]);
    $stats['completed_workouts'] = $stmt->fetchColumn();
    
    // Recent activity
    $stmt = $pdo->prepare("SELECT workout_date FROM user_workout_history 
                          WHERE user_id = ? 
                          ORDER BY workout_date DESC LIMIT 1");
    $stmt->execute([$userId]);
    $stats['last_workout'] = $stmt->fetchColumn();
    
    return $stats;
}

?>.
.
===============================
FILE PATH: C:\Users\yorgo_4ck6kyf\Documents\GitHub\BeFit\BeFit-Folder\workout_builder\includes\workout_history_functions.php
===============================
.
